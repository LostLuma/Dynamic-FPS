plugins {
	id("dynamic_fps.module")
	alias libs.plugins.shadow
}

repositories {
	// ModMenu
	exclusiveContent {
		filter { includeGroup("com.terraformersmc") }
		forRepository { maven { url = "https://maven.terraformersmc.com/releases" } }
	}
}

architectury {
	platformSetupLoomIde()
	fabric()
}

loom {
	accessWidenerPath = project(":platforms:common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modImplementation(libs.fabric.loader)

	modImplementation(fabricApi.module("fabric-resource-loader-v0", libs.versions.fabric.api.get()))
	modImplementation(fabricApi.module("fabric-lifecycle-events-v1", libs.versions.fabric.api.get()))

	modApi(libs.modmenu)

	include(libs.battery)

	common(project(path: ":platforms:common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":platforms:common", configuration: "transformProductionFabric")) { transitive false }
}

shadowJar {
	exclude "architectury.common.json"
	configurations = [project.configurations.shadowCommon]
}

remapJar {
	injectAccessWidener = true
	input.set shadowJar.archiveFile
	dependsOn shadowJar
}

sourcesJar {
	def commonSources = project(":platforms:common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}
